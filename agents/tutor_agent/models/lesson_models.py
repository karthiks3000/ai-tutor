"""
Lesson content, quiz, and question data models
"""
from typing import List, Optional, Union, Dict, Any
from datetime import datetime
from pydantic import BaseModel, Field
from .constants import (
    QuestionType,
    QuizType,
    DifficultyLevel,
    LessonContentType,
    FocusArea,
)


class VocabularyWord(BaseModel):
    """Vocabulary word with definition and example"""
    word: str
    definition: str
    example_sentence: str
    difficulty: DifficultyLevel
    part_of_speech: Optional[str] = None  # noun, verb, adjective, etc.


class LessonContent(BaseModel):
    """Lesson content generated by AI"""
    lesson_id: str
    topic: str
    title: str
    content: str  # HTML formatted text
    difficulty_level: DifficultyLevel
    grade_level: int = Field(ge=6, le=8)
    estimated_reading_time_minutes: int
    word_count: int
    
    # Educational metadata
    key_vocabulary: List[VocabularyWord] = Field(default_factory=list)
    learning_objectives: List[str] = Field(default_factory=list)
    student_interest_alignment: List[str] = Field(default_factory=list)
    
    # Focus areas covered
    focus_areas: List[FocusArea] = Field(default_factory=list)
    
    # Content type
    content_type: LessonContentType = LessonContentType.READING_PASSAGE


class WordPair(BaseModel):
    """Word-definition pair for word match questions"""
    word: str
    definition: str


class Question(BaseModel):
    """Single quiz question (supports all 6 types)"""
    question_id: str
    question_type: QuestionType
    question_text: str
    
    # Type-specific fields
    options: Optional[List[str]] = None  # For MCSA, MCMA, word bank for fill-in-blank
    correct_answer: Union[str, List[str]]  # String for most, List for MCMA and word_match
    
    # For word_match type
    word_pairs: Optional[List[WordPair]] = None
    
    # Metadata
    difficulty: DifficultyLevel
    topic: str
    points: int = 10
    hint: Optional[str] = None
    explanation: str  # Shown after answer, educational
    
    # For fill_in_blank
    sentence_template: Optional[str] = None  # Sentence with {blank} markers
    blank_positions: Optional[List[int]] = None  # Position indices for blanks


class Quiz(BaseModel):
    """Complete quiz with multiple questions"""
    quiz_id: str
    quiz_type: QuizType
    lesson_id: Optional[str] = None
    topic: str
    difficulty_level: DifficultyLevel
    
    # Questions
    questions: List[Question]
    total_questions: int
    
    # Configuration
    time_limit_seconds: Optional[int] = None
    passing_score_percentage: float = 70.0
    
    # Metadata
    created_at: datetime = Field(default_factory=datetime.now)
    focus_areas: List[FocusArea] = Field(default_factory=list)


class Feedback(BaseModel):
    """Feedback for a student's answer"""
    feedback_id: str
    question_id: str
    is_correct: bool
    
    # Answers
    student_answer: Union[str, List[str]]
    correct_answer: Union[str, List[str]]
    
    # Feedback content
    explanation: str  # Why answer is correct/incorrect
    encouragement: str  # Positive, motivating message
    next_steps: str  # What to study next
    
    # Points
    points_earned: int
    bonus_points: int = 0  # Speed bonus, streak bonus, etc.
    
    # For wrong answers
    common_mistake: Optional[str] = None
    learning_tip: Optional[str] = None


class Achievement(BaseModel):
    """Achievement/badge unlock"""
    achievement_id: str
    student_id: str
    achievement_type: str
    
    # Display info
    title: str
    description: str
    badge_icon: str  # Emoji
    badge_color: str  # Hex color
    
    # Rewards
    xp_awarded: int
    rarity: str  # common, uncommon, rare, epic, legendary
    category: str  # vocabulary, grammar, reading, writing, streak, speed
    
    # Timing
    unlocked_at: int = Field(default_factory=lambda: int(datetime.now().timestamp()))
    
    # Progress tracking
    progress_towards_next: Optional[Dict[str, Any]] = None
